"use strict";var ApplicationConfiguration=function(){var applicationModuleName="groovity-library",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","com.2fdevs.videogular","infinite-scroll"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("channels"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("player"),ApplicationConfiguration.registerModule("tracks"),ApplicationConfiguration.registerModule("users"),angular.module("channels").config(["$stateProvider",function($stateProvider){$stateProvider.state("listChannels",{url:"/channels",templateUrl:"modules/channels/views/list-channels.client.view.html"}).state("createChannel",{url:"/channels/create",templateUrl:"modules/channels/views/create-channel.client.view.html"}).state("viewChannel",{url:"/channels/:channelId",templateUrl:"modules/channels/views/view-channel.client.view.html"}).state("editChannel",{url:"/channels/:channelId/edit",templateUrl:"modules/channels/views/edit-channel.client.view.html"})}]),angular.module("channels").controller("ChannelsController",["$scope","$stateParams","$location","Authentication","Channels",function($scope,$stateParams,$location,Authentication,Channels){$scope.authentication=Authentication,$scope.create=function(){var channel=new Channels({name:this.name});channel.$save(function(response){$location.path("channels/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(channel){if(channel){channel.$remove();for(var i in $scope.channels)$scope.channels[i]===channel&&$scope.channels.splice(i,1)}else $scope.channel.$remove(function(){$location.path("channels")})},$scope.update=function(){var channel=$scope.channel;channel.$update(function(){$location.path("channels/"+channel._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.channels=Channels.query()},$scope.findOne=function(){$scope.channel=Channels.get({channelId:$stateParams.channelId})}}]),angular.module("channels").factory("Channels",["$resource",function($resource){return $resource("channels/:channelId",{channelId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"}).state("music",{url:"/music",templateUrl:"modules/core/views/music.client.view.html"}).state("radio",{url:"/radio",templateUrl:"modules/core/views/radio.client.view.html"}).state("viewRadio",{url:"/radio/:radioId",templateUrl:"modules/core/views/view-radio.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").service("Shared",[function(){var showPlayer={show:!1},playerParams={options:""};return{getShowPlayer:function(){return showPlayer},setShowPlayer:function(boolean){return showPlayer.show=boolean,showPlayer},getPlayerParams:function(){return playerParams},setPlayerParams:function(options){return playerParams.options=options,playerParams}}}]),angular.module("core").controller("PlayerController",["$scope","$sce","$timeout","Player","Shared",function($scope,$sce,$timeout,Player,Shared){$scope.showPlayer=Shared.getShowPlayer(),$scope.state=null,$scope.API=null,$scope.currentVideo=0,$scope.$on("initPlayer",function(){$scope.play()}),$scope.onPlayerReady=function(API){$scope.API=API},$scope.onCompleteVideo=function(){$scope.isCompleted=!0,$scope.currentVideo++,$scope.currentVideo>=$scope.videos.length&&($scope.currentVideo=0),$scope.setVideo($scope.currentVideo)},$scope.setVideo=function(index){$scope.API.stop(),$scope.currentVideo=index,$scope.config.sources=$scope.videos[index].sources,$timeout($scope.API.play.bind($scope.API),100)},$scope.config={preload:"preload",autoPlay:!1,sources:"[]"},$scope.play=function(){$scope.playerParams=Shared.getPlayerParams(),$scope.videos=[],Player.query({category:$scope.playerParams.options.category,mode:$scope.playerParams.options.mode,genre:$scope.playerParams.options.genre,start_with:$scope.playerParams.options.start_with}).$promise.then(function(tracks){angular.forEach(tracks,function(track){$scope.videos.push({sources:[{src:$sce.trustAsResourceUrl("https://s3-eu-west-1.amazonaws.com/smx2015/RaiNAS_1/RaiNAS/music/live/2015/"+track.filename_128),type:"audio/mpeg"}],title:track.title,artist:track.artist,filename:track.filename_128,id:track._id})}),$scope.playerParams.options.start_with&&($scope.currentVideo=$scope.videos.map(function(e){return e.filename}).indexOf($scope.playerParams.options.start_with)),$scope.API.stop(),$scope.currentVideo=$scope.currentVideo++||0,$scope.config.sources=$scope.videos[$scope.currentVideo].sources,$timeout($scope.API.play.bind($scope.API),100)})}}]),angular.module("player").factory("Player",["$resource",function($resource){return $resource("playlist",{},{})}]),angular.module("tracks").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Tracks","tracks","dropdown","/tracks(/create)?"),Menus.addSubMenuItem("topbar","tracks","List Tracks","tracks"),Menus.addSubMenuItem("topbar","tracks","New Track","tracks/create")}]),angular.module("tracks").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTracks",{url:"/tracks",templateUrl:"modules/tracks/views/list-tracks.client.view.html"}).state("createTrack",{url:"/tracks/create",templateUrl:"modules/tracks/views/create-track.client.view.html"}).state("viewTrack",{url:"/tracks/:trackId",templateUrl:"modules/tracks/views/view-track.client.view.html"}).state("editTrack",{url:"/tracks/:trackId/edit",templateUrl:"modules/tracks/views/edit-track.client.view.html"})}]),angular.module("tracks").controller("TracksController",["$scope","$rootScope","$stateParams","$location","Authentication","Tracks","$sce","$timeout","Shared","$log","$window",function($scope,$rootScope,$stateParams,$location,Authentication,Tracks,$sce,$timeout,Shared,$log,$window){$scope.authentication=Authentication,$scope.queryLimit=10,$scope.tracksGenre="",$scope.tracksCategory="latest",$scope.dropdown={title:"Choose Genre"},$scope.goBack=function(){$window.history.back()},$scope.genres=["House","Soulful House","Deep House","Afro House","Nu Disco / Indie Dance","Jackin House","Tech House","Techno","Classic House","Soul / Funk / Disco","Lounge / Chill Out","Afro / Latin / Brazilian","Broken Beat / Nu-Jazz","Progressive House","Electro House","Minimal","Electronica","Leftfield","R&B / Hip Hop","DJ Tools","Acapella","Beats"],$scope.play=function(options){Shared.setShowPlayer(!0),options.category=$scope.tracksCategory,options.mode=options.mode||"shuffle",options.genre=$scope.tracksGenre,Shared.setPlayerParams(options),$rootScope.$broadcast("initPlayer")},$scope.loadTracksCategory=function(category){$scope.tracksCategory=category,console.log($scope.tracksCategory),$scope.find()},$scope.loadTracksGenre=function(genre){$scope.dropdown.title=genre,$scope.tracksGenre="All genres"===genre?"":genre,$scope.find()},$scope.create=function(){var track=new Tracks({name:this.name});track.$save(function(response){$location.path("tracks/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(track){if(track){track.$remove();for(var i in $scope.tracks)$scope.tracks[i]===track&&$scope.tracks.splice(i,1)}else $scope.track.$remove(function(){$location.path("tracks")})},$scope.update=function(){var track=$scope.track;track.$update(function(){$location.path("tracks/"+track._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.queryPage=1,$scope.tracks=Tracks.query({page:$scope.queryPage,limit:$scope.queryLimit,category:$scope.tracksCategory,genre:$scope.tracksGenre})},$scope.findMore=function(){$scope.busy=!0,$scope.queryPage+=1,Tracks.query({page:$scope.queryPage,limit:$scope.queryLimit,category:$scope.tracksCategory,genre:$scope.tracksGenre},function(data){$scope.tracks.push.apply($scope.tracks,data),$scope.busy=!1})},$scope.findOne=function(){$scope.track=Tracks.get({trackId:$stateParams.trackId})}}]),angular.module("tracks").directive("dropdown",[function(){return{restrict:"E",require:"^ngModel",scope:{ngModel:"=",items:"=",callback:"&"},link:function(scope,element,attrs){element.on("click",function(event){event.preventDefault()}),scope["default"]="Choose genre",scope.isButton="isButton"in attrs,scope.select=function(item){scope.ngModel=item,scope.callback&&scope.callback({item:item})}},templateUrl:"modules/tracks/views/templates/dropdown.client.view.html"}}]),angular.module("tracks").directive("trackCard",[function(){return{templateUrl:"modules/tracks/views/templates/track-card.client.view.html"}}]),angular.module("tracks").factory("Tracks",["$resource",function($resource){return $resource("tracks/:trackId",{trackId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);